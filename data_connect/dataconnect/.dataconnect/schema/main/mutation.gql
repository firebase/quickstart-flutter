extend type Mutation {
  """
  ✨ Insert a single `Actor` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  actor_insert(
    """
    Data object to insert into the table.
    """
    data: Actor_Data!
  ): Actor_KeyOutput! @fdc_generated(from: "Actor", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `FavoriteMovie` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  favorite_movie_insert(
    """
    Data object to insert into the table.
    """
    data: FavoriteMovie_Data!
  ): FavoriteMovie_KeyOutput! @fdc_generated(from: "FavoriteMovie", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Movie` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movie_insert(
    """
    Data object to insert into the table.
    """
    data: Movie_Data!
  ): Movie_KeyOutput! @fdc_generated(from: "Movie", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `MovieActor` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieActor_insert(
    """
    Data object to insert into the table.
    """
    data: MovieActor_Data!
  ): MovieActor_KeyOutput! @fdc_generated(from: "MovieActor", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `MovieMetadata` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieMetadata_insert(
    """
    Data object to insert into the table.
    """
    data: MovieMetadata_Data!
  ): MovieMetadata_KeyOutput! @fdc_generated(from: "MovieMetadata", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `Review` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insert(
    """
    Data object to insert into the table.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: INSERT_SINGLE)
  """
  ✨ Insert a single `User` into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insert(
    """
    Data object to insert into the table.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: INSERT_SINGLE)
  """
  ✨ Insert `Actor` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  actor_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Actor_Data!]!
  ): [Actor_KeyOutput!]! @fdc_generated(from: "Actor", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `FavoriteMovie` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  favorite_movie_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [FavoriteMovie_Data!]!
  ): [FavoriteMovie_KeyOutput!]! @fdc_generated(from: "FavoriteMovie", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Movie` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movie_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Movie_Data!]!
  ): [Movie_KeyOutput!]! @fdc_generated(from: "Movie", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `MovieActor` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieActor_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [MovieActor_Data!]!
  ): [MovieActor_KeyOutput!]! @fdc_generated(from: "MovieActor", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `MovieMetadata` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  movieMetadata_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [MovieMetadata_Data!]!
  ): [MovieMetadata_KeyOutput!]! @fdc_generated(from: "MovieMetadata", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `Review` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  review_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert `User` objects into the table. Columns not specified in `data` will receive defaults (e.g. `null`).
  """
  user_insertMany(
    """
    List of data objects to insert into the table.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: INSERT_MULTIPLE)
  """
  ✨ Insert or update a single `Actor` into the table, based on the primary key. Returns the key of the newly inserted `Actor`.
  """
  actor_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Actor_Data!
  ): Actor_KeyOutput! @fdc_generated(from: "Actor", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `FavoriteMovie` into the table, based on the primary key. Returns the key of the newly inserted `FavoriteMovie`.
  """
  favorite_movie_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: FavoriteMovie_Data!
  ): FavoriteMovie_KeyOutput! @fdc_generated(from: "FavoriteMovie", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Movie` into the table, based on the primary key. Returns the key of the newly inserted `Movie`.
  """
  movie_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Movie_Data!
  ): Movie_KeyOutput! @fdc_generated(from: "Movie", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `MovieActor` into the table, based on the primary key. Returns the key of the newly inserted `MovieActor`.
  """
  movieActor_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: MovieActor_Data!
  ): MovieActor_KeyOutput! @fdc_generated(from: "MovieActor", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `MovieMetadata` into the table, based on the primary key. Returns the key of the newly inserted `MovieMetadata`.
  """
  movieMetadata_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: MovieMetadata_Data!
  ): MovieMetadata_KeyOutput! @fdc_generated(from: "MovieMetadata", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `Review` into the table, based on the primary key. Returns the key of the newly inserted `Review`.
  """
  review_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: Review_Data!
  ): Review_KeyOutput! @fdc_generated(from: "Review", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update a single `User` into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsert(
    """
    Data object to insert or update if it already exists.
    """
    data: User_Data!
  ): User_KeyOutput! @fdc_generated(from: "User", purpose: UPSERT_SINGLE)
  """
  ✨ Insert or update `Actor` objects into the table, based on the primary key. Returns the key of the newly inserted `Actor`.
  """
  actor_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Actor_Data!]!
  ): [Actor_KeyOutput!]! @fdc_generated(from: "Actor", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `FavoriteMovie` objects into the table, based on the primary key. Returns the key of the newly inserted `FavoriteMovie`.
  """
  favorite_movie_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [FavoriteMovie_Data!]!
  ): [FavoriteMovie_KeyOutput!]! @fdc_generated(from: "FavoriteMovie", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Movie` objects into the table, based on the primary key. Returns the key of the newly inserted `Movie`.
  """
  movie_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Movie_Data!]!
  ): [Movie_KeyOutput!]! @fdc_generated(from: "Movie", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `MovieActor` objects into the table, based on the primary key. Returns the key of the newly inserted `MovieActor`.
  """
  movieActor_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [MovieActor_Data!]!
  ): [MovieActor_KeyOutput!]! @fdc_generated(from: "MovieActor", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `MovieMetadata` objects into the table, based on the primary key. Returns the key of the newly inserted `MovieMetadata`.
  """
  movieMetadata_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [MovieMetadata_Data!]!
  ): [MovieMetadata_KeyOutput!]! @fdc_generated(from: "MovieMetadata", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `Review` objects into the table, based on the primary key. Returns the key of the newly inserted `Review`.
  """
  review_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [Review_Data!]!
  ): [Review_KeyOutput!]! @fdc_generated(from: "Review", purpose: UPSERT_MULTIPLE)
  """
  ✨ Insert or update `User` objects into the table, based on the primary key. Returns the key of the newly inserted `User`.
  """
  user_upsertMany(
    """
    List of data objects to insert or update if it already exists.
    """
    data: [User_Data!]!
  ): [User_KeyOutput!]! @fdc_generated(from: "User", purpose: UPSERT_MULTIPLE)
  """
  ✨ Update a single `Actor` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  actor_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Actor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Actor_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Actor_Data!
  ): Actor_KeyOutput @fdc_generated(from: "Actor", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `FavoriteMovie` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  favorite_movie_update(
    """
    The key used to identify the object.
    """
    key: FavoriteMovie_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: FavoriteMovie_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: FavoriteMovie_Data!
  ): FavoriteMovie_KeyOutput @fdc_generated(from: "FavoriteMovie", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Movie` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  movie_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Movie_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Movie_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Movie_Data!
  ): Movie_KeyOutput @fdc_generated(from: "Movie", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `MovieActor` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  movieActor_update(
    """
    The key used to identify the object.
    """
    key: MovieActor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MovieActor_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: MovieActor_Data!
  ): MovieActor_KeyOutput @fdc_generated(from: "MovieActor", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `MovieMetadata` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  movieMetadata_update(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: MovieMetadata_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MovieMetadata_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: MovieMetadata_Data!
  ): MovieMetadata_KeyOutput @fdc_generated(from: "MovieMetadata", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `Review` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  review_update(
    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: Review_Data!
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: UPDATE_SINGLE)
  """
  ✨ Update a single `User` based on `id`, `key` or `first`, setting columns specified in `data`. Returns `null` if not found.
  """
  user_update(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow

    """
    Data object containing fields to be updated.
    """
    data: User_Data!
  ): User_KeyOutput @fdc_generated(from: "User", purpose: UPDATE_SINGLE)
  """
  ✨ Update `Actor` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  actor_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Actor_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Actor_Data!
  ): Int! @fdc_generated(from: "Actor", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `FavoriteMovie` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  favorite_movie_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: FavoriteMovie_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: FavoriteMovie_Data!
  ): Int! @fdc_generated(from: "FavoriteMovie", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Movie` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  movie_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Movie_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Movie_Data!
  ): Int! @fdc_generated(from: "Movie", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `MovieActor` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  movieActor_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: MovieActor_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: MovieActor_Data!
  ): Int! @fdc_generated(from: "MovieActor", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `MovieMetadata` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  movieMetadata_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: MovieMetadata_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: MovieMetadata_Data!
  ): Int! @fdc_generated(from: "MovieMetadata", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `Review` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  review_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: Review_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: Review_Data!
  ): Int! @fdc_generated(from: "Review", purpose: UPDATE_MULTIPLE)
  """
  ✨ Update `User` objects matching `where` conditions (or `all`, if true) according to `data`. Returns the number of rows updated.
  """
  user_updateMany(
    """
    Filter condition to specify which rows to update.
    """
    where: User_Filter

    """
    Set to true to update all rows.
    """
    all: Boolean = false

    """
    Data object containing fields to update.
    """
    data: User_Data!
  ): Int! @fdc_generated(from: "User", purpose: UPDATE_MULTIPLE)
  """
  ✨ Delete a single `Actor` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  actor_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Actor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Actor_FirstRow
  ): Actor_KeyOutput @fdc_generated(from: "Actor", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `FavoriteMovie` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  favorite_movie_delete(
    """
    The key used to identify the object.
    """
    key: FavoriteMovie_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: FavoriteMovie_FirstRow
  ): FavoriteMovie_KeyOutput @fdc_generated(from: "FavoriteMovie", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Movie` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  movie_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Movie_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Movie_FirstRow
  ): Movie_KeyOutput @fdc_generated(from: "Movie", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `MovieActor` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  movieActor_delete(
    """
    The key used to identify the object.
    """
    key: MovieActor_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MovieActor_FirstRow
  ): MovieActor_KeyOutput @fdc_generated(from: "MovieActor", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `MovieMetadata` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  movieMetadata_delete(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: MovieMetadata_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: MovieMetadata_FirstRow
  ): MovieMetadata_KeyOutput @fdc_generated(from: "MovieMetadata", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `Review` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  review_delete(
    """
    The key used to identify the object.
    """
    key: Review_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Review_FirstRow
  ): Review_KeyOutput @fdc_generated(from: "Review", purpose: DELETE_SINGLE)
  """
  ✨ Delete a single `User` based on `id`, `key` or `first` and return its key (or `null` if not found).
  """
  user_delete(
    """
    The unique ID of the object.
    """
    id: String

    """
    ✨ `_expr` server value variant of `id` (The unique ID of the object.)
    """
    id_expr: String_Expr

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User_KeyOutput @fdc_generated(from: "User", purpose: DELETE_SINGLE)
  """
  ✨ Delete `Actor` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  actor_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Actor_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Actor", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `FavoriteMovie` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  favorite_movie_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: FavoriteMovie_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "FavoriteMovie", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Movie` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  movie_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Movie_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Movie", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `MovieActor` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  movieActor_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: MovieActor_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "MovieActor", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `MovieMetadata` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  movieMetadata_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: MovieMetadata_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "MovieMetadata", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `Review` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  review_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: Review_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "Review", purpose: DELETE_MULTIPLE)
  """
  ✨ Delete `User` objects matching `where` conditions (or `all`, if true). Returns the number of rows deleted.
  """
  user_deleteMany(
    """
    Filter condition to specify which rows to delete.
    """
    where: User_Filter

    """
    Set to true to delete all rows.
    """
    all: Boolean = false
  ): Int! @fdc_generated(from: "User", purpose: DELETE_MULTIPLE)
}
